
ACP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002b2  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  00000350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000891  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ca  00000000  00000000  00000cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000395  00000000  00000000  0000138b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000184  00000000  00000000  00001bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001d77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  9e:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_12>:
	{
		DisplayData(display_val);
	}
}

ISR (TIMER1_COMPB_vect) {}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_1>:
ISR (INT0_vect) {}
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_21>:

ISR (ADC_vect) //прерывание срабатывает когда завершено преобразование ј÷ѕ
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	display_val = ADC; //запись преобразованного значени€ в переменную
  dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  e8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <InitPorts>:

void InitPorts(void)
{
	DDRB = (1 << PB0 | 1 << PB1 | 1 << PB3 | 1 << PB5); 
  fa:	8b e2       	ldi	r24, 0x2B	; 43
  fc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0; 
  fe:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1 << PD2); 
 100:	5a 9a       	sbi	0x0b, 2	; 11
 102:	08 95       	ret

00000104 <InitTimer1>:
}

void InitTimer1(void)
{
	TCCR1A = 0;
 104:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << CS11 | 1 << CS10 | 1 << WGM12);
 108:	8b e0       	ldi	r24, 0x0B	; 11
 10a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1 = 0; 
 10e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 112:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1 << OCIE1B);
 116:	ef e6       	ldi	r30, 0x6F	; 111
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	80 83       	st	Z, r24
	OCR1A = 15262; 
 120:	8e e9       	ldi	r24, 0x9E	; 158
 122:	9b e3       	ldi	r25, 0x3B	; 59
 124:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 128:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 15262;
 12c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 130:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 134:	08 95       	ret

00000136 <Bin2Dec>:
}

void Bin2Dec(uint16_t data) //в массив bcd_buffer[] записываетс€ значение переменной cnt
{
 136:	ac 01       	movw	r20, r24
	bcd_buffer[3] = (uint8_t)(data / 1000);
 138:	9c 01       	movw	r18, r24
 13a:	36 95       	lsr	r19
 13c:	27 95       	ror	r18
 13e:	36 95       	lsr	r19
 140:	27 95       	ror	r18
 142:	36 95       	lsr	r19
 144:	27 95       	ror	r18
 146:	a5 ec       	ldi	r26, 0xC5	; 197
 148:	b0 e2       	ldi	r27, 0x20	; 32
 14a:	0e 94 48 01 	call	0x290	; 0x290 <__umulhisi3>
 14e:	92 95       	swap	r25
 150:	82 95       	swap	r24
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	89 27       	eor	r24, r25
 156:	9f 70       	andi	r25, 0x0F	; 15
 158:	89 27       	eor	r24, r25
 15a:	ec e0       	ldi	r30, 0x0C	; 12
 15c:	f1 e0       	ldi	r31, 0x01	; 1
 15e:	83 83       	std	Z+3, r24	; 0x03
	data = data % 1000;
 160:	68 ee       	ldi	r22, 0xE8	; 232
 162:	73 e0       	ldi	r23, 0x03	; 3
 164:	86 9f       	mul	r24, r22
 166:	90 01       	movw	r18, r0
 168:	87 9f       	mul	r24, r23
 16a:	30 0d       	add	r19, r0
 16c:	96 9f       	mul	r25, r22
 16e:	30 0d       	add	r19, r0
 170:	11 24       	eor	r1, r1
 172:	42 1b       	sub	r20, r18
 174:	53 0b       	sbc	r21, r19
	bcd_buffer[2] = (uint8_t)(data / 100);
 176:	9a 01       	movw	r18, r20
 178:	36 95       	lsr	r19
 17a:	27 95       	ror	r18
 17c:	36 95       	lsr	r19
 17e:	27 95       	ror	r18
 180:	ab e7       	ldi	r26, 0x7B	; 123
 182:	b4 e1       	ldi	r27, 0x14	; 20
 184:	0e 94 48 01 	call	0x290	; 0x290 <__umulhisi3>
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	82 83       	std	Z+2, r24	; 0x02
	data = data % 100;
 18e:	64 e6       	ldi	r22, 0x64	; 100
 190:	68 9f       	mul	r22, r24
 192:	90 01       	movw	r18, r0
 194:	69 9f       	mul	r22, r25
 196:	30 0d       	add	r19, r0
 198:	11 24       	eor	r1, r1
 19a:	42 1b       	sub	r20, r18
 19c:	53 0b       	sbc	r21, r19
	bcd_buffer[1] = (uint8_t)(data / 10);
 19e:	9a 01       	movw	r18, r20
 1a0:	ad ec       	ldi	r26, 0xCD	; 205
 1a2:	bc ec       	ldi	r27, 0xCC	; 204
 1a4:	0e 94 48 01 	call	0x290	; 0x290 <__umulhisi3>
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	81 83       	std	Z+1, r24	; 0x01
	data = data % 10;
	bcd_buffer[0] = (uint8_t)(data);
 1b6:	9c 01       	movw	r18, r24
 1b8:	22 0f       	add	r18, r18
 1ba:	33 1f       	adc	r19, r19
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	82 0f       	add	r24, r18
 1ca:	93 1f       	adc	r25, r19
 1cc:	48 1b       	sub	r20, r24
 1ce:	59 0b       	sbc	r21, r25
 1d0:	40 83       	st	Z, r20
 1d2:	08 95       	ret

000001d4 <SendData>:
}

void SendData(uint8_t data)
{
	SPDR = data; 
 1d4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));
 1d6:	0d b4       	in	r0, 0x2d	; 45
 1d8:	07 fe       	sbrs	r0, 7
 1da:	fd cf       	rjmp	.-6      	; 0x1d6 <SendData+0x2>
}
 1dc:	08 95       	ret

000001de <DisplayData>:

void DisplayData(uint16_t data)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	Bin2Dec(data);
 1e2:	0e 94 9b 00 	call	0x136	; 0x136 <Bin2Dec>
	PORTB &= ~(1 << PB1); //clk_out = 0
 1e6:	29 98       	cbi	0x05, 1	; 5
	SendData(segments[bcd_buffer[0]]);
 1e8:	cc e0       	ldi	r28, 0x0C	; 12
 1ea:	d1 e0       	ldi	r29, 0x01	; 1
 1ec:	e8 81       	ld	r30, Y
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	e0 50       	subi	r30, 0x00	; 0
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	80 81       	ld	r24, Z
 1f6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SendData>
	SendData(segments[bcd_buffer[1]]);
 1fa:	e9 81       	ldd	r30, Y+1	; 0x01
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e0 50       	subi	r30, 0x00	; 0
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	80 81       	ld	r24, Z
 204:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SendData>
	SendData(segments[bcd_buffer[2]]);
 208:	ea 81       	ldd	r30, Y+2	; 0x02
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e0 50       	subi	r30, 0x00	; 0
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	80 81       	ld	r24, Z
 212:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SendData>
	SendData(segments[bcd_buffer[3]]);
 216:	eb 81       	ldd	r30, Y+3	; 0x03
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	e0 50       	subi	r30, 0x00	; 0
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SendData>
	PORTB |= (1 << PB1); //clk_out = 1
 224:	29 9a       	sbi	0x05, 1	; 5
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <InitSPI>:

void InitSPI(void)
{
	DDRB |= (1 << PB3 | 1 << PB5); //настраиваем пины 3 и 5 порта ¬ на выход
 22c:	84 b1       	in	r24, 0x04	; 4
 22e:	88 62       	ori	r24, 0x28	; 40
 230:	84 b9       	out	0x04, r24	; 4
	SPSR |= (1 << SPI2X); //снижает скорость работы spi в два раза
 232:	8d b5       	in	r24, 0x2d	; 45
 234:	81 60       	ori	r24, 0x01	; 1
 236:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (1 << SPE | 1 << MSTR); //включение SPI, режим Master
 238:	8c b5       	in	r24, 0x2c	; 44
 23a:	80 65       	ori	r24, 0x50	; 80
 23c:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1 << PB3 | 1 << PB5); //подаем нули на выходные пины
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	87 7d       	andi	r24, 0xD7	; 215
 242:	85 b9       	out	0x05, r24	; 5
 244:	08 95       	ret

00000246 <InitADC>:
}

void InitADC(void)
{
	ADMUX = (1 << MUX0); //выбор входного канала ADC1
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRB = (1 << ADTS2 | 1 << ADTS0); //срабатывание компоратора ¬ таймера1
 24c:	85 e0       	ldi	r24, 0x05	; 5
 24e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRA = (1 << ADEN | 1 << ADATE | 1 << ADIE); //запуск ј÷ѕ, автоматический перезапуск ј÷ѕ, разрешение прерывани€ ј÷ѕ
 252:	88 ea       	ldi	r24, 0xA8	; 168
 254:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 258:	08 95       	ret

0000025a <main>:
volatile uint8_t bcd_buffer[] = {0, 0, 0, 0};
volatile uint16_t display_val = 0;

int main(void)
{
	InitPorts();
 25a:	0e 94 7d 00 	call	0xfa	; 0xfa <InitPorts>
	InitSPI();
 25e:	0e 94 16 01 	call	0x22c	; 0x22c <InitSPI>
	InitTimer1();
 262:	0e 94 82 00 	call	0x104	; 0x104 <InitTimer1>
	EIMSK |= (1 << INT0); 
 266:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC01); 
 268:	e9 e6       	ldi	r30, 0x69	; 105
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	82 60       	ori	r24, 0x02	; 2
 270:	80 83       	st	Z, r24
	InitADC();
 272:	0e 94 23 01 	call	0x246	; 0x246 <InitADC>
	sei();
 276:	78 94       	sei
	
	PORTB &= ~(1 << PB0);
 278:	28 98       	cbi	0x05, 0	; 5
	DisplayData(0);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 ef 00 	call	0x1de	; 0x1de <DisplayData>
	
	while(1)
	{
		DisplayData(display_val);
 282:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 286:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 28a:	0e 94 ef 00 	call	0x1de	; 0x1de <DisplayData>
 28e:	f9 cf       	rjmp	.-14     	; 0x282 <main+0x28>

00000290 <__umulhisi3>:
 290:	a2 9f       	mul	r26, r18
 292:	b0 01       	movw	r22, r0
 294:	b3 9f       	mul	r27, r19
 296:	c0 01       	movw	r24, r0
 298:	a3 9f       	mul	r26, r19
 29a:	70 0d       	add	r23, r0
 29c:	81 1d       	adc	r24, r1
 29e:	11 24       	eor	r1, r1
 2a0:	91 1d       	adc	r25, r1
 2a2:	b2 9f       	mul	r27, r18
 2a4:	70 0d       	add	r23, r0
 2a6:	81 1d       	adc	r24, r1
 2a8:	11 24       	eor	r1, r1
 2aa:	91 1d       	adc	r25, r1
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
