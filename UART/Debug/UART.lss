
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000003c4  00000458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800128  00800128  00000480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c4  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006de  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000466  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000369  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000023cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ec       	ldi	r30, 0xC4	; 196
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  9e:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_12>:
	{
		DisplayData(display_val);
	}
}

ISR (TIMER1_COMPB_vect) {}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_21>:
	SendChar(0x30 + bcd_buffer[0]);
	SendString("\r\n");
}

ISR (ADC_vect) //прерывание срабатывает когда завершено преобразование ј÷ѕ
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	display_val = ADC; //запись преобразованного значени€ в переменную
  c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
  d4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <InitPorts>:
		SendString("Roger that\r\n");
}

void InitPorts(void)
{
	DDRB = (1 << PB0 | 1 << PB1 | 1 << PB3 | 1 << PB5);
  e6:	8b e2       	ldi	r24, 0x2B	; 43
  e8:	84 b9       	out	0x04, r24	; 4
	DDRD = 0;
  ea:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1 << PD2);
  ec:	5a 9a       	sbi	0x0b, 2	; 11
  ee:	08 95       	ret

000000f0 <InitTimer1>:
}

void InitTimer1(void)
{
	TCCR1A = 0;
  f0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << CS11 | 1 << CS10 | 1 << WGM12);
  f4:	8b e0       	ldi	r24, 0x0B	; 11
  f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1 = 0;
  fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIMSK1 |= (1 << OCIE1B);
 102:	ef e6       	ldi	r30, 0x6F	; 111
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	80 83       	st	Z, r24
	OCR1A = 15262;
 10c:	8e e9       	ldi	r24, 0x9E	; 158
 10e:	9b e3       	ldi	r25, 0x3B	; 59
 110:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 114:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 15262;
 118:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 11c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 120:	08 95       	ret

00000122 <Bin2Dec>:
}

void Bin2Dec(uint16_t data) //в массив bcd_buffer[] записываетс€ значение переменной cnt
{
 122:	ac 01       	movw	r20, r24
	bcd_buffer[3] = (uint8_t)(data / 1000);
 124:	9c 01       	movw	r18, r24
 126:	36 95       	lsr	r19
 128:	27 95       	ror	r18
 12a:	36 95       	lsr	r19
 12c:	27 95       	ror	r18
 12e:	36 95       	lsr	r19
 130:	27 95       	ror	r18
 132:	a5 ec       	ldi	r26, 0xC5	; 197
 134:	b0 e2       	ldi	r27, 0x20	; 32
 136:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__umulhisi3>
 13a:	92 95       	swap	r25
 13c:	82 95       	swap	r24
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	89 27       	eor	r24, r25
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	89 27       	eor	r24, r25
 146:	ea e2       	ldi	r30, 0x2A	; 42
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	83 83       	std	Z+3, r24	; 0x03
	data = data % 1000;
 14c:	68 ee       	ldi	r22, 0xE8	; 232
 14e:	73 e0       	ldi	r23, 0x03	; 3
 150:	86 9f       	mul	r24, r22
 152:	90 01       	movw	r18, r0
 154:	87 9f       	mul	r24, r23
 156:	30 0d       	add	r19, r0
 158:	96 9f       	mul	r25, r22
 15a:	30 0d       	add	r19, r0
 15c:	11 24       	eor	r1, r1
 15e:	42 1b       	sub	r20, r18
 160:	53 0b       	sbc	r21, r19
	bcd_buffer[2] = (uint8_t)(data / 100);
 162:	9a 01       	movw	r18, r20
 164:	36 95       	lsr	r19
 166:	27 95       	ror	r18
 168:	36 95       	lsr	r19
 16a:	27 95       	ror	r18
 16c:	ab e7       	ldi	r26, 0x7B	; 123
 16e:	b4 e1       	ldi	r27, 0x14	; 20
 170:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__umulhisi3>
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	82 83       	std	Z+2, r24	; 0x02
	data = data % 100;
 17a:	64 e6       	ldi	r22, 0x64	; 100
 17c:	68 9f       	mul	r22, r24
 17e:	90 01       	movw	r18, r0
 180:	69 9f       	mul	r22, r25
 182:	30 0d       	add	r19, r0
 184:	11 24       	eor	r1, r1
 186:	42 1b       	sub	r20, r18
 188:	53 0b       	sbc	r21, r19
	bcd_buffer[1] = (uint8_t)(data / 10);
 18a:	9a 01       	movw	r18, r20
 18c:	ad ec       	ldi	r26, 0xCD	; 205
 18e:	bc ec       	ldi	r27, 0xCC	; 204
 190:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__umulhisi3>
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	81 83       	std	Z+1, r24	; 0x01
	data = data % 10;
	bcd_buffer[0] = (uint8_t)(data);
 1a2:	9c 01       	movw	r18, r24
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	82 0f       	add	r24, r18
 1b6:	93 1f       	adc	r25, r19
 1b8:	48 1b       	sub	r20, r24
 1ba:	59 0b       	sbc	r21, r25
 1bc:	40 83       	st	Z, r20
 1be:	08 95       	ret

000001c0 <SendData>:
}

void SendData(uint8_t data)
{
	SPDR = data;
 1c0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));
 1c2:	0d b4       	in	r0, 0x2d	; 45
 1c4:	07 fe       	sbrs	r0, 7
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <SendData+0x2>
}
 1c8:	08 95       	ret

000001ca <DisplayData>:

void DisplayData(uint16_t data)
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
	Bin2Dec(data);
 1ce:	0e 94 91 00 	call	0x122	; 0x122 <Bin2Dec>
	PORTB &= ~(1 << PB1); //clk_out = 0
 1d2:	29 98       	cbi	0x05, 1	; 5
	SendData(segments[bcd_buffer[0]]);
 1d4:	ca e2       	ldi	r28, 0x2A	; 42
 1d6:	d1 e0       	ldi	r29, 0x01	; 1
 1d8:	e8 81       	ld	r30, Y
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	e0 50       	subi	r30, 0x00	; 0
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	80 81       	ld	r24, Z
 1e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendData>
	SendData(segments[bcd_buffer[1]]);
 1e6:	e9 81       	ldd	r30, Y+1	; 0x01
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	e0 50       	subi	r30, 0x00	; 0
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	80 81       	ld	r24, Z
 1f0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendData>
	SendData(segments[bcd_buffer[2]]);
 1f4:	ea 81       	ldd	r30, Y+2	; 0x02
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	e0 50       	subi	r30, 0x00	; 0
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	80 81       	ld	r24, Z
 1fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendData>
	SendData(segments[bcd_buffer[3]]);
 202:	eb 81       	ldd	r30, Y+3	; 0x03
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	e0 50       	subi	r30, 0x00	; 0
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	80 81       	ld	r24, Z
 20c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SendData>
	PORTB |= (1 << PB1); //clk_out = 1
 210:	29 9a       	sbi	0x05, 1	; 5
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <InitSPI>:

void InitSPI(void)
{
	DDRB |= (1 << PB3 | 1 << PB5); //настраиваем пины 3 и 5 порта ¬ на выход
 218:	84 b1       	in	r24, 0x04	; 4
 21a:	88 62       	ori	r24, 0x28	; 40
 21c:	84 b9       	out	0x04, r24	; 4
	SPSR |= (1 << SPI2X); //снижает скорость работы spi в два раза
 21e:	8d b5       	in	r24, 0x2d	; 45
 220:	81 60       	ori	r24, 0x01	; 1
 222:	8d bd       	out	0x2d, r24	; 45
	SPCR |= (1 << SPE | 1 << MSTR); //включение SPI, режим Master
 224:	8c b5       	in	r24, 0x2c	; 44
 226:	80 65       	ori	r24, 0x50	; 80
 228:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1 << PB3 | 1 << PB5); //подаем нули на выходные пины
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	87 7d       	andi	r24, 0xD7	; 215
 22e:	85 b9       	out	0x05, r24	; 5
 230:	08 95       	ret

00000232 <InitADC>:
}

void InitADC(void)
{
	ADMUX = (1 << MUX0); //выбор входного канала ADC1
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRB = (1 << ADTS2 | 1 << ADTS0); //срабатывание компоратора ¬ таймера1
 238:	85 e0       	ldi	r24, 0x05	; 5
 23a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRA = (1 << ADEN | 1 << ADATE | 1 << ADIE); //запуск ј÷ѕ, автоматический перезапуск ј÷ѕ, разрешение прерывани€ ј÷ѕ
 23e:	88 ea       	ldi	r24, 0xA8	; 168
 240:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 244:	08 95       	ret

00000246 <InitUSART>:
}

void InitUSART(void) //функци€ дл€ настройки USART
{
	UCSR0B = (1 << RXEN0 | 1 << TXEN0); // включение приемника и передатчика
 246:	88 e1       	ldi	r24, 0x18	; 24
 248:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01 | 1 << UCSZ00); //определение размера посылки: 8 бит
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0H = 0; 
 252:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 0x0C; //скорость передачи 4800бод
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 25c:	08 95       	ret

0000025e <SendChar>:
}

void SendChar(char symbol)
{
	while (!(UCSR0A & (1 << UDRE0)));
 25e:	e0 ec       	ldi	r30, 0xC0	; 192
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	90 81       	ld	r25, Z
 264:	95 ff       	sbrs	r25, 5
 266:	fd cf       	rjmp	.-6      	; 0x262 <SendChar+0x4>
	UDR0 = symbol;
 268:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 26c:	08 95       	ret

0000026e <SendString>:
}

void SendString(char* buffer)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
	while (*buffer != 0)
 274:	88 81       	ld	r24, Y
 276:	88 23       	and	r24, r24
 278:	31 f0       	breq	.+12     	; 0x286 <SendString+0x18>
 27a:	21 96       	adiw	r28, 0x01	; 1
	SendChar(*buffer++);
 27c:	0e 94 2f 01 	call	0x25e	; 0x25e <SendChar>
	UDR0 = symbol;
}

void SendString(char* buffer)
{
	while (*buffer != 0)
 280:	89 91       	ld	r24, Y+
 282:	81 11       	cpse	r24, r1
 284:	fb cf       	rjmp	.-10     	; 0x27c <SendString+0xe>
	SendChar(*buffer++);
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <main>:
volatile uint8_t bcd_buffer[] = {0, 0, 0, 0};
volatile uint16_t display_val = 0;

int main(void)
{
	InitPorts();
 28c:	0e 94 73 00 	call	0xe6	; 0xe6 <InitPorts>
	InitSPI();
 290:	0e 94 0c 01 	call	0x218	; 0x218 <InitSPI>
	InitTimer1();
 294:	0e 94 78 00 	call	0xf0	; 0xf0 <InitTimer1>
	EIMSK |= (1 << INT0);
 298:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC01);
 29a:	e9 e6       	ldi	r30, 0x69	; 105
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	82 60       	ori	r24, 0x02	; 2
 2a2:	80 83       	st	Z, r24
	InitADC();
 2a4:	0e 94 19 01 	call	0x232	; 0x232 <InitADC>
	InitUSART();
 2a8:	0e 94 23 01 	call	0x246	; 0x246 <InitUSART>
	sei();
 2ac:	78 94       	sei
	
	PORTB &= ~(1 << PB0);
 2ae:	28 98       	cbi	0x05, 0	; 5
	DisplayData(0);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DisplayData>
	SendString("Hello\r\n");
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 37 01 	call	0x26e	; 0x26e <SendString>
	while(1)
	{
		DisplayData(display_val);
 2c0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 2c4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 2c8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DisplayData>
 2cc:	f9 cf       	rjmp	.-14     	; 0x2c0 <main+0x34>

000002ce <__vector_1>:
	}
}

ISR (TIMER1_COMPB_vect) {}
ISR (INT0_vect) 
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
	SendString("Value = "); 
 2f4:	82 e1       	ldi	r24, 0x12	; 18
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 37 01 	call	0x26e	; 0x26e <SendString>
	SendChar(0x30 + bcd_buffer[3]);
 2fc:	ca e2       	ldi	r28, 0x2A	; 42
 2fe:	d1 e0       	ldi	r29, 0x01	; 1
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	80 5d       	subi	r24, 0xD0	; 208
 304:	0e 94 2f 01 	call	0x25e	; 0x25e <SendChar>
	SendChar(0x30 + bcd_buffer[2]);
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	80 5d       	subi	r24, 0xD0	; 208
 30c:	0e 94 2f 01 	call	0x25e	; 0x25e <SendChar>
	SendChar(0x30 + bcd_buffer[1]);
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	80 5d       	subi	r24, 0xD0	; 208
 314:	0e 94 2f 01 	call	0x25e	; 0x25e <SendChar>
	SendChar(0x30 + bcd_buffer[0]);
 318:	88 81       	ld	r24, Y
 31a:	80 5d       	subi	r24, 0xD0	; 208
 31c:	0e 94 2f 01 	call	0x25e	; 0x25e <SendChar>
	SendString("\r\n");
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 37 01 	call	0x26e	; 0x26e <SendString>
}
 328:	ff 91       	pop	r31
 32a:	ef 91       	pop	r30
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	bf 91       	pop	r27
 332:	af 91       	pop	r26
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	7f 91       	pop	r23
 33a:	6f 91       	pop	r22
 33c:	5f 91       	pop	r21
 33e:	4f 91       	pop	r20
 340:	3f 91       	pop	r19
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_18>:
{
	display_val = ADC; //запись преобразованного значени€ в переменную
}

ISR(USART_RX_vect)
{
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	ef 93       	push	r30
 36e:	ff 93       	push	r31
	if(UDR0 == 0x20)
 370:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 374:	80 32       	cpi	r24, 0x20	; 32
 376:	21 f4       	brne	.+8      	; 0x380 <__vector_18+0x32>
		SendString("Roger that\r\n");
 378:	8b e1       	ldi	r24, 0x1B	; 27
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 37 01 	call	0x26e	; 0x26e <SendString>
}
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	7f 91       	pop	r23
 38e:	6f 91       	pop	r22
 390:	5f 91       	pop	r21
 392:	4f 91       	pop	r20
 394:	3f 91       	pop	r19
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__umulhisi3>:
 3a2:	a2 9f       	mul	r26, r18
 3a4:	b0 01       	movw	r22, r0
 3a6:	b3 9f       	mul	r27, r19
 3a8:	c0 01       	movw	r24, r0
 3aa:	a3 9f       	mul	r26, r19
 3ac:	70 0d       	add	r23, r0
 3ae:	81 1d       	adc	r24, r1
 3b0:	11 24       	eor	r1, r1
 3b2:	91 1d       	adc	r25, r1
 3b4:	b2 9f       	mul	r27, r18
 3b6:	70 0d       	add	r23, r0
 3b8:	81 1d       	adc	r24, r1
 3ba:	11 24       	eor	r1, r1
 3bc:	91 1d       	adc	r25, r1
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
