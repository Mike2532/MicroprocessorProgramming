
dymanic_ind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010a  0080010a  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e6  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000778  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003aa  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000400  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001dc  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
	send_data(bcd_buffer[1], 2);
	send_data(bcd_buffer[0], 3);
}

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	if (switch_state == 0)
  b2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
  b6:	81 11       	cpse	r24, r1
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__vector_1+0x1c>
	{
		switch_state = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <switch_state>
  c0:	06 c0       	rjmp	.+12     	; 0xce <__vector_1+0x28>
	}
	else
	{
		switch_state = 0;
  c2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <switch_state>
		cnt = 0;
  c6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt+0x1>
  ca:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt>
	}
}
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <InitPorts>:

void InitPorts(void) //начальная инициализация портов
{
	DDRB = 0xFF; //весь порт B работает на выход
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0x0F; //биты 0-3 в порте С направляются на выход
  de:	87 b1       	in	r24, 0x07	; 7
  e0:	8f 60       	ori	r24, 0x0F	; 15
  e2:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0x0F; //на выходные биты порта С подаются 1
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	8f 60       	ori	r24, 0x0F	; 15
  e8:	88 b9       	out	0x08, r24	; 8
	DDRD &= ~(1 << 2);
  ea:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
  ec:	5a 9a       	sbi	0x0b, 2	; 11
  ee:	08 95       	ret

000000f0 <InitTimer0>:
}

void InitTimer0(void) //начальная инициализация таймера
{
	TCCR0A |= (1 << WGM01); //выбор режима работы СTC
  f0:	84 b5       	in	r24, 0x24	; 36
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02 | 1 << CS00); //настройка предделителя на 1024
  f6:	85 b5       	in	r24, 0x25	; 37
  f8:	85 60       	ori	r24, 0x05	; 5
  fa:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00; //начальное значение счета
  fc:	16 bc       	out	0x26, r1	; 38
	OCR0A = 16; //таймер будет сравнивать посчитанное число с OCR0A и при совпадении сбросит таймер
  fe:	80 e1       	ldi	r24, 0x10	; 16
 100:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A); //включает прерывание, если счетчик совпадет со значением OCR0A
 102:	ee e6       	ldi	r30, 0x6E	; 110
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <Bin2Dec>:
}

void Bin2Dec(uint16_t data) //в массив bcd_buffer[] записывается значение переменной cnt
{
 10e:	ac 01       	movw	r20, r24
	bcd_buffer[3]=(uint8_t)(data / 1000);
 110:	9c 01       	movw	r18, r24
 112:	36 95       	lsr	r19
 114:	27 95       	ror	r18
 116:	36 95       	lsr	r19
 118:	27 95       	ror	r18
 11a:	36 95       	lsr	r19
 11c:	27 95       	ror	r18
 11e:	a5 ec       	ldi	r26, 0xC5	; 197
 120:	b0 e2       	ldi	r27, 0x20	; 32
 122:	0e 94 4f 01 	call	0x29e	; 0x29e <__umulhisi3>
 126:	92 95       	swap	r25
 128:	82 95       	swap	r24
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	89 27       	eor	r24, r25
 12e:	9f 70       	andi	r25, 0x0F	; 15
 130:	89 27       	eor	r24, r25
 132:	ea e0       	ldi	r30, 0x0A	; 10
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	83 83       	std	Z+3, r24	; 0x03
	data = data - bcd_buffer[3] * 1000;
 138:	63 81       	ldd	r22, Z+3	; 0x03
 13a:	28 e1       	ldi	r18, 0x18	; 24
 13c:	3c ef       	ldi	r19, 0xFC	; 252
 13e:	62 9f       	mul	r22, r18
 140:	c0 01       	movw	r24, r0
 142:	63 9f       	mul	r22, r19
 144:	90 0d       	add	r25, r0
 146:	11 24       	eor	r1, r1
 148:	48 0f       	add	r20, r24
 14a:	59 1f       	adc	r21, r25
	bcd_buffer[2] = (uint8_t)(data / 100);
 14c:	9a 01       	movw	r18, r20
 14e:	36 95       	lsr	r19
 150:	27 95       	ror	r18
 152:	36 95       	lsr	r19
 154:	27 95       	ror	r18
 156:	ab e7       	ldi	r26, 0x7B	; 123
 158:	b4 e1       	ldi	r27, 0x14	; 20
 15a:	0e 94 4f 01 	call	0x29e	; 0x29e <__umulhisi3>
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	82 83       	std	Z+2, r24	; 0x02
	data = data - bcd_buffer[2] * 100;
 164:	82 81       	ldd	r24, Z+2	; 0x02
 166:	94 e6       	ldi	r25, 0x64	; 100
 168:	89 9f       	mul	r24, r25
 16a:	40 19       	sub	r20, r0
 16c:	51 09       	sbc	r21, r1
 16e:	11 24       	eor	r1, r1
	bcd_buffer[1] = (uint8_t)(data / 10);
 170:	9a 01       	movw	r18, r20
 172:	ad ec       	ldi	r26, 0xCD	; 205
 174:	bc ec       	ldi	r27, 0xCC	; 204
 176:	0e 94 4f 01 	call	0x29e	; 0x29e <__umulhisi3>
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	81 83       	std	Z+1, r24	; 0x01
	data = data - bcd_buffer[1] * 10;
 188:	81 81       	ldd	r24, Z+1	; 0x01
	bcd_buffer[0] = (uint8_t)(data);
 18a:	9a e0       	ldi	r25, 0x0A	; 10
 18c:	89 9f       	mul	r24, r25
 18e:	40 19       	sub	r20, r0
 190:	51 09       	sbc	r21, r1
 192:	11 24       	eor	r1, r1
 194:	40 83       	st	Z, r20
 196:	08 95       	ret

00000198 <main>:
volatile uint8_t switch_state = 0;
volatile uint8_t bcd_buffer[] = {0, 0, 0, 0};

int main(void)
{
	InitPorts();
 198:	0e 94 6d 00 	call	0xda	; 0xda <InitPorts>
	InitTimer0();
 19c:	0e 94 78 00 	call	0xf0	; 0xf0 <InitTimer0>
	EIMSK |= (1 << INT0); //включение прерывания INT0
 1a0:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC01); //Настройка INT0 на прерывание по спаду
 1a2:	e9 e6       	ldi	r30, 0x69	; 105
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
	sei(); //Глобальное разрешение пре- рываний
 1ac:	78 94       	sei
	
	while(1)
	{
		if (switch_state == 0)
 1ae:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <switch_state>
 1b2:	81 11       	cpse	r24, r1
 1b4:	fc cf       	rjmp	.-8      	; 0x1ae <main+0x16>
		{
			Bin2Dec(cnt);
 1b6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 1ba:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <cnt+0x1>
 1be:	0e 94 87 00 	call	0x10e	; 0x10e <Bin2Dec>
			if (cnt < 9999)
 1c2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 1c6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <cnt+0x1>
 1ca:	8f 30       	cpi	r24, 0x0F	; 15
 1cc:	97 42       	sbci	r25, 0x27	; 39
 1ce:	50 f4       	brcc	.+20     	; 0x1e4 <main+0x4c>
			{
				cnt++;
 1d0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 1d4:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <cnt+0x1>
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <cnt+0x1>
 1de:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt>
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <main+0x54>
			}
			else
			{
				cnt = 0;
 1e4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt+0x1>
 1e8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	87 ea       	ldi	r24, 0xA7	; 167
 1ee:	91 e6       	ldi	r25, 0x61	; 97
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0x58>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x5e>
 1f6:	00 00       	nop
 1f8:	da cf       	rjmp	.-76     	; 0x1ae <main+0x16>

000001fa <send_data>:
	bcd_buffer[0] = (uint8_t)(data);
}

void send_data(uint8_t data, uint8_t ind)
{
	PORTC = 0x0F & ~(1 << ind);
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <send_data+0xa>
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <send_data+0x6>
 208:	20 95       	com	r18
 20a:	2f 70       	andi	r18, 0x0F	; 15
 20c:	28 b9       	out	0x08, r18	; 8
	PORTB = segments[data];
 20e:	e8 2f       	mov	r30, r24
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	e0 50       	subi	r30, 0x00	; 0
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	80 81       	ld	r24, Z
 218:	85 b9       	out	0x05, r24	; 5
 21a:	81 ee       	ldi	r24, 0xE1	; 225
 21c:	94 e0       	ldi	r25, 0x04	; 4
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <send_data+0x24>
 222:	00 c0       	rjmp	.+0      	; 0x224 <send_data+0x2a>
 224:	00 00       	nop
	_delay_ms(5);
	PORTB = 0;
 226:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x0F;
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	88 b9       	out	0x08, r24	; 8
 22c:	08 95       	ret

0000022e <__vector_14>:
		}
	}
}

ISR(TIMER0_COMPA_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
	send_data(bcd_buffer[3], 0);
 254:	ca e0       	ldi	r28, 0x0A	; 10
 256:	d1 e0       	ldi	r29, 0x01	; 1
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <send_data>
	send_data(bcd_buffer[2], 1);
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	0e 94 fd 00 	call	0x1fa	; 0x1fa <send_data>
	send_data(bcd_buffer[1], 2);
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	62 e0       	ldi	r22, 0x02	; 2
 26c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <send_data>
	send_data(bcd_buffer[0], 3);
 270:	88 81       	ld	r24, Y
 272:	63 e0       	ldi	r22, 0x03	; 3
 274:	0e 94 fd 00 	call	0x1fa	; 0x1fa <send_data>
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__umulhisi3>:
 29e:	a2 9f       	mul	r26, r18
 2a0:	b0 01       	movw	r22, r0
 2a2:	b3 9f       	mul	r27, r19
 2a4:	c0 01       	movw	r24, r0
 2a6:	a3 9f       	mul	r26, r19
 2a8:	70 0d       	add	r23, r0
 2aa:	81 1d       	adc	r24, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	91 1d       	adc	r25, r1
 2b0:	b2 9f       	mul	r27, r18
 2b2:	70 0d       	add	r23, r0
 2b4:	81 1d       	adc	r24, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	91 1d       	adc	r25, r1
 2ba:	08 95       	ret

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
